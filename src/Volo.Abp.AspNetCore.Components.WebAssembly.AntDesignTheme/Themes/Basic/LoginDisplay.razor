@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Volo.Abp.Users
@using Volo.Abp.MultiTenancy
@inject ICurrentUser CurrentUser
@inject ICurrentTenant CurrentTenant
@inject IJSRuntime JsRuntime
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
<AuthorizeView>
    <Authorized>
        <Dropdown>
            <Overlay>
                <Menu>
                    @if (Menu != null)
                    {
                        @foreach (var menuItem in Menu.Items)
                        {
                            <MenuItem OnClick="@(() => NavigateToAsync(menuItem.Url, menuItem.Target))">@menuItem.DisplayName</MenuItem>
                        }
                    }
                    <MenuItem OnClick="BeginSignOut">Logout</MenuItem>
                </Menu>
            </Overlay>
            <ChildContent>
                <a class="ant-dropdown-link" @onclick:preventDefault>
                    @if (CurrentTenant.Name != null)
                    {
                        <span><i>@CurrentTenant.Name</i>\@CurrentUser.UserName</span>
                    }
                    else
                    {
                        <span>@CurrentUser.UserName</span>
                    } 
                    <Icon Type="down" />
                </a>
            </ChildContent>
        </Dropdown>
    </Authorized>
    <NotAuthorized>
        <a class="nav-link" href="authentication/login">Log in</a>
    </NotAuthorized>
</AuthorizeView>
@code{

    private async Task NavigateToAsync(string uri, string target = null)
    {
        if (target == "_blank")
        {
            await JsRuntime.InvokeVoidAsync("open", uri, target);
        }
        else
        {
            Navigation.NavigateTo(uri);
        }
    }

    private async Task BeginSignOut()
    {
        await SignOutManager.SetSignOutState();
        await NavigateToAsync("authentication/logout");
    }
}
